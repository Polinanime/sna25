name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development
      deploy_backend:
        description: "Deploy backend"
        required: true
        default: "true"
        type: boolean
      deploy_frontend:
        description: "Deploy frontend"
        required: true
        default: "true"
        type: boolean

jobs:
  deploy-backend:
    if: ${{ github.event.inputs.deploy_backend == 'true' }}
    name: Deploy Backend to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify SSH agent
        run: |
          ssh-add -l
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK"

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/known_hosts

      - name: Copy compose.yml to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          sed -e "s|\${DOCKER_HUB_USERNAME}|${{ secrets.DOCKER_HUB_USERNAME }}|g" \
              -e "s|\${DB_USER}|${{ secrets.DB_USER }}|g" \
              -e "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" \
              -e "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" \
              compose.yml > docker-compose.modified.yml
          cat docker-compose.modified.yml

          # Create .env file for database credentials
          echo "DB_USER=${{ secrets.DB_USER || 'postgres' }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD || 'password' }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME || 'realworld' }}" >> .env

          scp docker-compose.modified.yml $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/compose.yml
          scp .env $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/.env

      - name: Deploy to ${{ github.event.inputs.environment }}
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          ssh -v $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && \
            ls -la && \
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sna25-backend:latest && \
            if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ] || [ -f compose.yml ] || [ -f compose.yaml ]; then \
              echo "Running docker-compose for database and backend" && \
              docker-compose up -d postgres && \
              docker-compose up -d backend; \
            else \
              echo 'ERROR: No docker-compose file found!' && \
              pwd && \
              exit 1; \
            fi"

  deploy-frontend:
    if: ${{ github.event.inputs.deploy_frontend == 'true' }}
    name: Deploy Frontend to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/known_hosts
          echo "SSH configuration directory:"
          ls -la ~/.ssh

      - name: Copy compose.yml to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          sed -e "s|\${DOCKER_HUB_USERNAME}|${{ secrets.DOCKER_HUB_USERNAME }}|g" \
              -e "s|\${DB_USER}|${{ secrets.DB_USER }}|g" \
              -e "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" \
              -e "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" \
              compose.yml > docker-compose.modified.yml
          cat docker-compose.modified.yml

          # Reuse .env file created in the backend job if this job runs separately
          if [ ! -f .env ]; then
            echo "DB_USER=${{ secrets.DB_USER || 'postgres' }}" > .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD || 'password' }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME || 'realworld' }}" >> .env
          fi

          scp docker-compose.modified.yml $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/compose.yml
          scp .env $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/.env

      - name: Deploy to ${{ github.event.inputs.environment }}
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          ssh -v $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && \
            ls -la && \
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/sna25-frontend:latest && \
            if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ] || [ -f compose.yml ] || [ -f compose.yaml ]; then \
              echo "Running docker-compose for frontend" && \
              docker-compose up -d frontend; \
            else \
              echo 'ERROR: No docker-compose file found!' && \
              pwd && \
              exit 1; \
            fi"
